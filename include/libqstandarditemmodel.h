#pragma once
#ifndef SRCC_LIBQSTANDARDITEMMODEL_H
#define SRCC_LIBQSTANDARDITEMMODEL_H

#include <stdbool.h>
#include <stddef.h>
#include <stdint.h>

#pragma GCC diagnostic ignored "-Wdeprecated-declarations"

#include "qtlibc.h"

#ifdef __cplusplus
extern "C" {
#endif

#ifdef __cplusplus
#if defined(WORKAROUND_INNER_CLASS_DEFINITION_QMetaObject__Connection)
typedef QMetaObject::Connection QMetaObject__Connection;
#endif
#else
typedef struct QAbstractItemModel QAbstractItemModel;
typedef struct QAnyStringView QAnyStringView;
typedef struct QBindingStorage QBindingStorage;
typedef struct QBrush QBrush;
typedef struct QChildEvent QChildEvent;
typedef struct QDataStream QDataStream;
typedef struct QEvent QEvent;
typedef struct QFont QFont;
typedef struct QIcon QIcon;
typedef struct QMetaMethod QMetaMethod;
typedef struct QMetaObject QMetaObject;
typedef struct QMetaObject__Connection QMetaObject__Connection;
typedef struct QMimeData QMimeData;
typedef struct QModelIndex QModelIndex;
typedef struct QModelRoleDataSpan QModelRoleDataSpan;
typedef struct QObject QObject;
typedef struct QPersistentModelIndex QPersistentModelIndex;
typedef struct QSize QSize;
typedef struct QStandardItem QStandardItem;
typedef struct QStandardItemModel QStandardItemModel;
typedef struct QThread QThread;
typedef struct QTimerEvent QTimerEvent;
typedef struct QVariant QVariant;
#endif

#ifdef __cplusplus
typedef QStandardItem::ItemType ItemType; // C++ enum
#else
typedef int ItemType; // C ABI enum
#endif

QStandardItem* QStandardItem_new();
QStandardItem* QStandardItem_new2(libqt_string text);
QStandardItem* QStandardItem_new3(QIcon* icon, libqt_string text);
QStandardItem* QStandardItem_new4(int rows);
QStandardItem* QStandardItem_new5(int rows, int columns);
QVariant* QStandardItem_Data(const QStandardItem* self, int role);
void QStandardItem_OnData(const QStandardItem* self, intptr_t slot);
QVariant* QStandardItem_QBaseData(const QStandardItem* self, int role);
void QStandardItem_MultiData(const QStandardItem* self, QModelRoleDataSpan* roleDataSpan);
void QStandardItem_OnMultiData(const QStandardItem* self, intptr_t slot);
void QStandardItem_QBaseMultiData(const QStandardItem* self, QModelRoleDataSpan* roleDataSpan);
void QStandardItem_SetData(QStandardItem* self, QVariant* value, int role);
void QStandardItem_OnSetData(QStandardItem* self, intptr_t slot);
void QStandardItem_QBaseSetData(QStandardItem* self, QVariant* value, int role);
void QStandardItem_ClearData(QStandardItem* self);
libqt_string QStandardItem_Text(const QStandardItem* self);
void QStandardItem_SetText(QStandardItem* self, libqt_string text);
QIcon* QStandardItem_Icon(const QStandardItem* self);
void QStandardItem_SetIcon(QStandardItem* self, QIcon* icon);
libqt_string QStandardItem_ToolTip(const QStandardItem* self);
void QStandardItem_SetToolTip(QStandardItem* self, libqt_string toolTip);
libqt_string QStandardItem_StatusTip(const QStandardItem* self);
void QStandardItem_SetStatusTip(QStandardItem* self, libqt_string statusTip);
libqt_string QStandardItem_WhatsThis(const QStandardItem* self);
void QStandardItem_SetWhatsThis(QStandardItem* self, libqt_string whatsThis);
QSize* QStandardItem_SizeHint(const QStandardItem* self);
void QStandardItem_SetSizeHint(QStandardItem* self, QSize* sizeHint);
QFont* QStandardItem_Font(const QStandardItem* self);
void QStandardItem_SetFont(QStandardItem* self, QFont* font);
int QStandardItem_TextAlignment(const QStandardItem* self);
void QStandardItem_SetTextAlignment(QStandardItem* self, int textAlignment);
QBrush* QStandardItem_Background(const QStandardItem* self);
void QStandardItem_SetBackground(QStandardItem* self, QBrush* brush);
QBrush* QStandardItem_Foreground(const QStandardItem* self);
void QStandardItem_SetForeground(QStandardItem* self, QBrush* brush);
int QStandardItem_CheckState(const QStandardItem* self);
void QStandardItem_SetCheckState(QStandardItem* self, int checkState);
libqt_string QStandardItem_AccessibleText(const QStandardItem* self);
void QStandardItem_SetAccessibleText(QStandardItem* self, libqt_string accessibleText);
libqt_string QStandardItem_AccessibleDescription(const QStandardItem* self);
void QStandardItem_SetAccessibleDescription(QStandardItem* self, libqt_string accessibleDescription);
int QStandardItem_Flags(const QStandardItem* self);
void QStandardItem_SetFlags(QStandardItem* self, int flags);
bool QStandardItem_IsEnabled(const QStandardItem* self);
void QStandardItem_SetEnabled(QStandardItem* self, bool enabled);
bool QStandardItem_IsEditable(const QStandardItem* self);
void QStandardItem_SetEditable(QStandardItem* self, bool editable);
bool QStandardItem_IsSelectable(const QStandardItem* self);
void QStandardItem_SetSelectable(QStandardItem* self, bool selectable);
bool QStandardItem_IsCheckable(const QStandardItem* self);
void QStandardItem_SetCheckable(QStandardItem* self, bool checkable);
bool QStandardItem_IsAutoTristate(const QStandardItem* self);
void QStandardItem_SetAutoTristate(QStandardItem* self, bool tristate);
bool QStandardItem_IsUserTristate(const QStandardItem* self);
void QStandardItem_SetUserTristate(QStandardItem* self, bool tristate);
bool QStandardItem_IsDragEnabled(const QStandardItem* self);
void QStandardItem_SetDragEnabled(QStandardItem* self, bool dragEnabled);
bool QStandardItem_IsDropEnabled(const QStandardItem* self);
void QStandardItem_SetDropEnabled(QStandardItem* self, bool dropEnabled);
QStandardItem* QStandardItem_Parent(const QStandardItem* self);
int QStandardItem_Row(const QStandardItem* self);
int QStandardItem_Column(const QStandardItem* self);
QModelIndex* QStandardItem_Index(const QStandardItem* self);
QStandardItemModel* QStandardItem_Model(const QStandardItem* self);
int QStandardItem_RowCount(const QStandardItem* self);
void QStandardItem_SetRowCount(QStandardItem* self, int rows);
int QStandardItem_ColumnCount(const QStandardItem* self);
void QStandardItem_SetColumnCount(QStandardItem* self, int columns);
bool QStandardItem_HasChildren(const QStandardItem* self);
QStandardItem* QStandardItem_Child(const QStandardItem* self, int row);
void QStandardItem_SetChild(QStandardItem* self, int row, int column, QStandardItem* item);
void QStandardItem_SetChild2(QStandardItem* self, int row, QStandardItem* item);
void QStandardItem_InsertRow(QStandardItem* self, int row, libqt_list /* of QStandardItem* */ items);
void QStandardItem_InsertColumn(QStandardItem* self, int column, libqt_list /* of QStandardItem* */ items);
void QStandardItem_InsertRows(QStandardItem* self, int row, libqt_list /* of QStandardItem* */ items);
void QStandardItem_InsertRows2(QStandardItem* self, int row, int count);
void QStandardItem_InsertColumns(QStandardItem* self, int column, int count);
void QStandardItem_RemoveRow(QStandardItem* self, int row);
void QStandardItem_RemoveColumn(QStandardItem* self, int column);
void QStandardItem_RemoveRows(QStandardItem* self, int row, int count);
void QStandardItem_RemoveColumns(QStandardItem* self, int column, int count);
void QStandardItem_AppendRow(QStandardItem* self, libqt_list /* of QStandardItem* */ items);
void QStandardItem_AppendRows(QStandardItem* self, libqt_list /* of QStandardItem* */ items);
void QStandardItem_AppendColumn(QStandardItem* self, libqt_list /* of QStandardItem* */ items);
void QStandardItem_InsertRow2(QStandardItem* self, int row, QStandardItem* item);
void QStandardItem_AppendRowWithItem(QStandardItem* self, QStandardItem* item);
QStandardItem* QStandardItem_TakeChild(QStandardItem* self, int row);
libqt_list /* of QStandardItem* */ QStandardItem_TakeRow(QStandardItem* self, int row);
libqt_list /* of QStandardItem* */ QStandardItem_TakeColumn(QStandardItem* self, int column);
void QStandardItem_SortChildren(QStandardItem* self, int column);
QStandardItem* QStandardItem_Clone(const QStandardItem* self);
void QStandardItem_OnClone(const QStandardItem* self, intptr_t slot);
QStandardItem* QStandardItem_QBaseClone(const QStandardItem* self);
int QStandardItem_Type(const QStandardItem* self);
void QStandardItem_OnType(const QStandardItem* self, intptr_t slot);
int QStandardItem_QBaseType(const QStandardItem* self);
void QStandardItem_Read(QStandardItem* self, QDataStream* in);
void QStandardItem_OnRead(QStandardItem* self, intptr_t slot);
void QStandardItem_QBaseRead(QStandardItem* self, QDataStream* in);
void QStandardItem_Write(const QStandardItem* self, QDataStream* out);
void QStandardItem_OnWrite(const QStandardItem* self, intptr_t slot);
void QStandardItem_QBaseWrite(const QStandardItem* self, QDataStream* out);
bool QStandardItem_OperatorLesser(const QStandardItem* self, QStandardItem* other);
void QStandardItem_OnOperatorLesser(const QStandardItem* self, intptr_t slot);
bool QStandardItem_QBaseOperatorLesser(const QStandardItem* self, QStandardItem* other);
QStandardItem* QStandardItem_Child2(const QStandardItem* self, int row, int column);
QStandardItem* QStandardItem_TakeChild2(QStandardItem* self, int row, int column);
void QStandardItem_SortChildren2(QStandardItem* self, int column, int order);
void QStandardItem_OperatorAssign(QStandardItem* self, QStandardItem* other);
void QStandardItem_OnOperatorAssign(QStandardItem* self, intptr_t slot);
void QStandardItem_QBaseOperatorAssign(QStandardItem* self, QStandardItem* other);
void QStandardItem_EmitDataChanged(QStandardItem* self);
void QStandardItem_OnEmitDataChanged(QStandardItem* self, intptr_t slot);
void QStandardItem_QBaseEmitDataChanged(QStandardItem* self);
void QStandardItem_Delete(QStandardItem* self);

QStandardItemModel* QStandardItemModel_new();
QStandardItemModel* QStandardItemModel_new2(int rows, int columns);
QStandardItemModel* QStandardItemModel_new3(QObject* parent);
QStandardItemModel* QStandardItemModel_new4(int rows, int columns, QObject* parent);
QMetaObject* QStandardItemModel_MetaObject(const QStandardItemModel* self);
void* QStandardItemModel_Metacast(QStandardItemModel* self, const char* param1);
int QStandardItemModel_Metacall(QStandardItemModel* self, int param1, int param2, void** param3);
void QStandardItemModel_OnMetacall(QStandardItemModel* self, intptr_t slot);
int QStandardItemModel_QBaseMetacall(QStandardItemModel* self, int param1, int param2, void** param3);
libqt_string QStandardItemModel_Tr(const char* s);
void QStandardItemModel_SetItemRoleNames(QStandardItemModel* self, libqt_map /* of int to libqt_string */ roleNames);
libqt_map /* of int to libqt_string */ QStandardItemModel_RoleNames(const QStandardItemModel* self);
void QStandardItemModel_OnRoleNames(const QStandardItemModel* self, intptr_t slot);
libqt_map /* of int to libqt_string */ QStandardItemModel_QBaseRoleNames(const QStandardItemModel* self);
QModelIndex* QStandardItemModel_Index(const QStandardItemModel* self, int row, int column, QModelIndex* parent);
void QStandardItemModel_OnIndex(const QStandardItemModel* self, intptr_t slot);
QModelIndex* QStandardItemModel_QBaseIndex(const QStandardItemModel* self, int row, int column, QModelIndex* parent);
QModelIndex* QStandardItemModel_Parent(const QStandardItemModel* self, QModelIndex* child);
void QStandardItemModel_OnParent(const QStandardItemModel* self, intptr_t slot);
QModelIndex* QStandardItemModel_QBaseParent(const QStandardItemModel* self, QModelIndex* child);
int QStandardItemModel_RowCount(const QStandardItemModel* self, QModelIndex* parent);
void QStandardItemModel_OnRowCount(const QStandardItemModel* self, intptr_t slot);
int QStandardItemModel_QBaseRowCount(const QStandardItemModel* self, QModelIndex* parent);
int QStandardItemModel_ColumnCount(const QStandardItemModel* self, QModelIndex* parent);
void QStandardItemModel_OnColumnCount(const QStandardItemModel* self, intptr_t slot);
int QStandardItemModel_QBaseColumnCount(const QStandardItemModel* self, QModelIndex* parent);
bool QStandardItemModel_HasChildren(const QStandardItemModel* self, QModelIndex* parent);
void QStandardItemModel_OnHasChildren(const QStandardItemModel* self, intptr_t slot);
bool QStandardItemModel_QBaseHasChildren(const QStandardItemModel* self, QModelIndex* parent);
QVariant* QStandardItemModel_Data(const QStandardItemModel* self, QModelIndex* index, int role);
void QStandardItemModel_OnData(const QStandardItemModel* self, intptr_t slot);
QVariant* QStandardItemModel_QBaseData(const QStandardItemModel* self, QModelIndex* index, int role);
void QStandardItemModel_MultiData(const QStandardItemModel* self, QModelIndex* index, QModelRoleDataSpan* roleDataSpan);
void QStandardItemModel_OnMultiData(const QStandardItemModel* self, intptr_t slot);
void QStandardItemModel_QBaseMultiData(const QStandardItemModel* self, QModelIndex* index, QModelRoleDataSpan* roleDataSpan);
bool QStandardItemModel_SetData(QStandardItemModel* self, QModelIndex* index, QVariant* value, int role);
void QStandardItemModel_OnSetData(QStandardItemModel* self, intptr_t slot);
bool QStandardItemModel_QBaseSetData(QStandardItemModel* self, QModelIndex* index, QVariant* value, int role);
bool QStandardItemModel_ClearItemData(QStandardItemModel* self, QModelIndex* index);
void QStandardItemModel_OnClearItemData(QStandardItemModel* self, intptr_t slot);
bool QStandardItemModel_QBaseClearItemData(QStandardItemModel* self, QModelIndex* index);
QVariant* QStandardItemModel_HeaderData(const QStandardItemModel* self, int section, int orientation, int role);
void QStandardItemModel_OnHeaderData(const QStandardItemModel* self, intptr_t slot);
QVariant* QStandardItemModel_QBaseHeaderData(const QStandardItemModel* self, int section, int orientation, int role);
bool QStandardItemModel_SetHeaderData(QStandardItemModel* self, int section, int orientation, QVariant* value, int role);
void QStandardItemModel_OnSetHeaderData(QStandardItemModel* self, intptr_t slot);
bool QStandardItemModel_QBaseSetHeaderData(QStandardItemModel* self, int section, int orientation, QVariant* value, int role);
bool QStandardItemModel_InsertRows(QStandardItemModel* self, int row, int count, QModelIndex* parent);
void QStandardItemModel_OnInsertRows(QStandardItemModel* self, intptr_t slot);
bool QStandardItemModel_QBaseInsertRows(QStandardItemModel* self, int row, int count, QModelIndex* parent);
bool QStandardItemModel_InsertColumns(QStandardItemModel* self, int column, int count, QModelIndex* parent);
void QStandardItemModel_OnInsertColumns(QStandardItemModel* self, intptr_t slot);
bool QStandardItemModel_QBaseInsertColumns(QStandardItemModel* self, int column, int count, QModelIndex* parent);
bool QStandardItemModel_RemoveRows(QStandardItemModel* self, int row, int count, QModelIndex* parent);
void QStandardItemModel_OnRemoveRows(QStandardItemModel* self, intptr_t slot);
bool QStandardItemModel_QBaseRemoveRows(QStandardItemModel* self, int row, int count, QModelIndex* parent);
bool QStandardItemModel_RemoveColumns(QStandardItemModel* self, int column, int count, QModelIndex* parent);
void QStandardItemModel_OnRemoveColumns(QStandardItemModel* self, intptr_t slot);
bool QStandardItemModel_QBaseRemoveColumns(QStandardItemModel* self, int column, int count, QModelIndex* parent);
int QStandardItemModel_Flags(const QStandardItemModel* self, QModelIndex* index);
void QStandardItemModel_OnFlags(const QStandardItemModel* self, intptr_t slot);
int QStandardItemModel_QBaseFlags(const QStandardItemModel* self, QModelIndex* index);
int QStandardItemModel_SupportedDropActions(const QStandardItemModel* self);
void QStandardItemModel_OnSupportedDropActions(const QStandardItemModel* self, intptr_t slot);
int QStandardItemModel_QBaseSupportedDropActions(const QStandardItemModel* self);
libqt_map /* of int to QVariant* */ QStandardItemModel_ItemData(const QStandardItemModel* self, QModelIndex* index);
void QStandardItemModel_OnItemData(const QStandardItemModel* self, intptr_t slot);
libqt_map /* of int to QVariant* */ QStandardItemModel_QBaseItemData(const QStandardItemModel* self, QModelIndex* index);
bool QStandardItemModel_SetItemData(QStandardItemModel* self, QModelIndex* index, libqt_map /* of int to QVariant* */ roles);
void QStandardItemModel_OnSetItemData(QStandardItemModel* self, intptr_t slot);
bool QStandardItemModel_QBaseSetItemData(QStandardItemModel* self, QModelIndex* index, libqt_map /* of int to QVariant* */ roles);
void QStandardItemModel_Clear(QStandardItemModel* self);
void QStandardItemModel_Sort(QStandardItemModel* self, int column, int order);
void QStandardItemModel_OnSort(QStandardItemModel* self, intptr_t slot);
void QStandardItemModel_QBaseSort(QStandardItemModel* self, int column, int order);
QStandardItem* QStandardItemModel_ItemFromIndex(const QStandardItemModel* self, QModelIndex* index);
QModelIndex* QStandardItemModel_IndexFromItem(const QStandardItemModel* self, QStandardItem* item);
QStandardItem* QStandardItemModel_Item(const QStandardItemModel* self, int row);
void QStandardItemModel_SetItem(QStandardItemModel* self, int row, int column, QStandardItem* item);
void QStandardItemModel_SetItem2(QStandardItemModel* self, int row, QStandardItem* item);
QStandardItem* QStandardItemModel_InvisibleRootItem(const QStandardItemModel* self);
QStandardItem* QStandardItemModel_HorizontalHeaderItem(const QStandardItemModel* self, int column);
void QStandardItemModel_SetHorizontalHeaderItem(QStandardItemModel* self, int column, QStandardItem* item);
QStandardItem* QStandardItemModel_VerticalHeaderItem(const QStandardItemModel* self, int row);
void QStandardItemModel_SetVerticalHeaderItem(QStandardItemModel* self, int row, QStandardItem* item);
void QStandardItemModel_SetHorizontalHeaderLabels(QStandardItemModel* self, libqt_list /* of libqt_string */ labels);
void QStandardItemModel_SetVerticalHeaderLabels(QStandardItemModel* self, libqt_list /* of libqt_string */ labels);
void QStandardItemModel_SetRowCount(QStandardItemModel* self, int rows);
void QStandardItemModel_SetColumnCount(QStandardItemModel* self, int columns);
void QStandardItemModel_AppendRow(QStandardItemModel* self, libqt_list /* of QStandardItem* */ items);
void QStandardItemModel_AppendColumn(QStandardItemModel* self, libqt_list /* of QStandardItem* */ items);
void QStandardItemModel_AppendRowWithItem(QStandardItemModel* self, QStandardItem* item);
void QStandardItemModel_InsertRow(QStandardItemModel* self, int row, libqt_list /* of QStandardItem* */ items);
void QStandardItemModel_InsertColumn(QStandardItemModel* self, int column, libqt_list /* of QStandardItem* */ items);
void QStandardItemModel_InsertRow2(QStandardItemModel* self, int row, QStandardItem* item);
bool QStandardItemModel_InsertRowWithRow(QStandardItemModel* self, int row);
bool QStandardItemModel_InsertColumnWithColumn(QStandardItemModel* self, int column);
QStandardItem* QStandardItemModel_TakeItem(QStandardItemModel* self, int row);
libqt_list /* of QStandardItem* */ QStandardItemModel_TakeRow(QStandardItemModel* self, int row);
libqt_list /* of QStandardItem* */ QStandardItemModel_TakeColumn(QStandardItemModel* self, int column);
QStandardItem* QStandardItemModel_TakeHorizontalHeaderItem(QStandardItemModel* self, int column);
QStandardItem* QStandardItemModel_TakeVerticalHeaderItem(QStandardItemModel* self, int row);
QStandardItem* QStandardItemModel_ItemPrototype(const QStandardItemModel* self);
void QStandardItemModel_SetItemPrototype(QStandardItemModel* self, QStandardItem* item);
libqt_list /* of QStandardItem* */ QStandardItemModel_FindItems(const QStandardItemModel* self, libqt_string text);
int QStandardItemModel_SortRole(const QStandardItemModel* self);
void QStandardItemModel_SetSortRole(QStandardItemModel* self, int role);
libqt_list /* of libqt_string */ QStandardItemModel_MimeTypes(const QStandardItemModel* self);
void QStandardItemModel_OnMimeTypes(const QStandardItemModel* self, intptr_t slot);
libqt_list /* of libqt_string */ QStandardItemModel_QBaseMimeTypes(const QStandardItemModel* self);
QMimeData* QStandardItemModel_MimeData(const QStandardItemModel* self, libqt_list /* of QModelIndex* */ indexes);
void QStandardItemModel_OnMimeData(const QStandardItemModel* self, intptr_t slot);
QMimeData* QStandardItemModel_QBaseMimeData(const QStandardItemModel* self, libqt_list /* of QModelIndex* */ indexes);
bool QStandardItemModel_DropMimeData(QStandardItemModel* self, QMimeData* data, int action, int row, int column, QModelIndex* parent);
void QStandardItemModel_OnDropMimeData(QStandardItemModel* self, intptr_t slot);
bool QStandardItemModel_QBaseDropMimeData(QStandardItemModel* self, QMimeData* data, int action, int row, int column, QModelIndex* parent);
void QStandardItemModel_ItemChanged(QStandardItemModel* self, QStandardItem* item);
void QStandardItemModel_Connect_ItemChanged(QStandardItemModel* self, intptr_t slot);
libqt_string QStandardItemModel_Tr2(const char* s, const char* c);
libqt_string QStandardItemModel_Tr3(const char* s, const char* c, int n);
QStandardItem* QStandardItemModel_Item2(const QStandardItemModel* self, int row, int column);
bool QStandardItemModel_InsertRow22(QStandardItemModel* self, int row, QModelIndex* parent);
bool QStandardItemModel_InsertColumn2(QStandardItemModel* self, int column, QModelIndex* parent);
QStandardItem* QStandardItemModel_TakeItem2(QStandardItemModel* self, int row, int column);
libqt_list /* of QStandardItem* */ QStandardItemModel_FindItems2(const QStandardItemModel* self, libqt_string text, int flags);
libqt_list /* of QStandardItem* */ QStandardItemModel_FindItems3(const QStandardItemModel* self, libqt_string text, int flags, int column);
QModelIndex* QStandardItemModel_Sibling(const QStandardItemModel* self, int row, int column, QModelIndex* idx);
void QStandardItemModel_OnSibling(const QStandardItemModel* self, intptr_t slot);
QModelIndex* QStandardItemModel_QBaseSibling(const QStandardItemModel* self, int row, int column, QModelIndex* idx);
bool QStandardItemModel_CanDropMimeData(const QStandardItemModel* self, QMimeData* data, int action, int row, int column, QModelIndex* parent);
void QStandardItemModel_OnCanDropMimeData(const QStandardItemModel* self, intptr_t slot);
bool QStandardItemModel_QBaseCanDropMimeData(const QStandardItemModel* self, QMimeData* data, int action, int row, int column, QModelIndex* parent);
int QStandardItemModel_SupportedDragActions(const QStandardItemModel* self);
void QStandardItemModel_OnSupportedDragActions(const QStandardItemModel* self, intptr_t slot);
int QStandardItemModel_QBaseSupportedDragActions(const QStandardItemModel* self);
bool QStandardItemModel_MoveRows(QStandardItemModel* self, QModelIndex* sourceParent, int sourceRow, int count, QModelIndex* destinationParent, int destinationChild);
void QStandardItemModel_OnMoveRows(QStandardItemModel* self, intptr_t slot);
bool QStandardItemModel_QBaseMoveRows(QStandardItemModel* self, QModelIndex* sourceParent, int sourceRow, int count, QModelIndex* destinationParent, int destinationChild);
bool QStandardItemModel_MoveColumns(QStandardItemModel* self, QModelIndex* sourceParent, int sourceColumn, int count, QModelIndex* destinationParent, int destinationChild);
void QStandardItemModel_OnMoveColumns(QStandardItemModel* self, intptr_t slot);
bool QStandardItemModel_QBaseMoveColumns(QStandardItemModel* self, QModelIndex* sourceParent, int sourceColumn, int count, QModelIndex* destinationParent, int destinationChild);
void QStandardItemModel_FetchMore(QStandardItemModel* self, QModelIndex* parent);
void QStandardItemModel_OnFetchMore(QStandardItemModel* self, intptr_t slot);
void QStandardItemModel_QBaseFetchMore(QStandardItemModel* self, QModelIndex* parent);
bool QStandardItemModel_CanFetchMore(const QStandardItemModel* self, QModelIndex* parent);
void QStandardItemModel_OnCanFetchMore(const QStandardItemModel* self, intptr_t slot);
bool QStandardItemModel_QBaseCanFetchMore(const QStandardItemModel* self, QModelIndex* parent);
QModelIndex* QStandardItemModel_Buddy(const QStandardItemModel* self, QModelIndex* index);
void QStandardItemModel_OnBuddy(const QStandardItemModel* self, intptr_t slot);
QModelIndex* QStandardItemModel_QBaseBuddy(const QStandardItemModel* self, QModelIndex* index);
libqt_list /* of QModelIndex* */ QStandardItemModel_Match(const QStandardItemModel* self, QModelIndex* start, int role, QVariant* value, int hits, int flags);
void QStandardItemModel_OnMatch(const QStandardItemModel* self, intptr_t slot);
libqt_list /* of QModelIndex* */ QStandardItemModel_QBaseMatch(const QStandardItemModel* self, QModelIndex* start, int role, QVariant* value, int hits, int flags);
QSize* QStandardItemModel_Span(const QStandardItemModel* self, QModelIndex* index);
void QStandardItemModel_OnSpan(const QStandardItemModel* self, intptr_t slot);
QSize* QStandardItemModel_QBaseSpan(const QStandardItemModel* self, QModelIndex* index);
bool QStandardItemModel_Submit(QStandardItemModel* self);
void QStandardItemModel_OnSubmit(QStandardItemModel* self, intptr_t slot);
bool QStandardItemModel_QBaseSubmit(QStandardItemModel* self);
void QStandardItemModel_Revert(QStandardItemModel* self);
void QStandardItemModel_OnRevert(QStandardItemModel* self, intptr_t slot);
void QStandardItemModel_QBaseRevert(QStandardItemModel* self);
void QStandardItemModel_ResetInternalData(QStandardItemModel* self);
void QStandardItemModel_OnResetInternalData(QStandardItemModel* self, intptr_t slot);
void QStandardItemModel_QBaseResetInternalData(QStandardItemModel* self);
bool QStandardItemModel_Event(QStandardItemModel* self, QEvent* event);
void QStandardItemModel_OnEvent(QStandardItemModel* self, intptr_t slot);
bool QStandardItemModel_QBaseEvent(QStandardItemModel* self, QEvent* event);
bool QStandardItemModel_EventFilter(QStandardItemModel* self, QObject* watched, QEvent* event);
void QStandardItemModel_OnEventFilter(QStandardItemModel* self, intptr_t slot);
bool QStandardItemModel_QBaseEventFilter(QStandardItemModel* self, QObject* watched, QEvent* event);
void QStandardItemModel_TimerEvent(QStandardItemModel* self, QTimerEvent* event);
void QStandardItemModel_OnTimerEvent(QStandardItemModel* self, intptr_t slot);
void QStandardItemModel_QBaseTimerEvent(QStandardItemModel* self, QTimerEvent* event);
void QStandardItemModel_ChildEvent(QStandardItemModel* self, QChildEvent* event);
void QStandardItemModel_OnChildEvent(QStandardItemModel* self, intptr_t slot);
void QStandardItemModel_QBaseChildEvent(QStandardItemModel* self, QChildEvent* event);
void QStandardItemModel_CustomEvent(QStandardItemModel* self, QEvent* event);
void QStandardItemModel_OnCustomEvent(QStandardItemModel* self, intptr_t slot);
void QStandardItemModel_QBaseCustomEvent(QStandardItemModel* self, QEvent* event);
void QStandardItemModel_ConnectNotify(QStandardItemModel* self, QMetaMethod* signal);
void QStandardItemModel_OnConnectNotify(QStandardItemModel* self, intptr_t slot);
void QStandardItemModel_QBaseConnectNotify(QStandardItemModel* self, QMetaMethod* signal);
void QStandardItemModel_DisconnectNotify(QStandardItemModel* self, QMetaMethod* signal);
void QStandardItemModel_OnDisconnectNotify(QStandardItemModel* self, intptr_t slot);
void QStandardItemModel_QBaseDisconnectNotify(QStandardItemModel* self, QMetaMethod* signal);
QModelIndex* QStandardItemModel_CreateIndex(const QStandardItemModel* self, int row, int column);
void QStandardItemModel_OnCreateIndex(const QStandardItemModel* self, intptr_t slot);
QModelIndex* QStandardItemModel_QBaseCreateIndex(const QStandardItemModel* self, int row, int column);
void QStandardItemModel_EncodeData(const QStandardItemModel* self, libqt_list /* of QModelIndex* */ indexes, QDataStream* stream);
void QStandardItemModel_OnEncodeData(const QStandardItemModel* self, intptr_t slot);
void QStandardItemModel_QBaseEncodeData(const QStandardItemModel* self, libqt_list /* of QModelIndex* */ indexes, QDataStream* stream);
bool QStandardItemModel_DecodeData(QStandardItemModel* self, int row, int column, QModelIndex* parent, QDataStream* stream);
void QStandardItemModel_OnDecodeData(QStandardItemModel* self, intptr_t slot);
bool QStandardItemModel_QBaseDecodeData(QStandardItemModel* self, int row, int column, QModelIndex* parent, QDataStream* stream);
void QStandardItemModel_BeginInsertRows(QStandardItemModel* self, QModelIndex* parent, int first, int last);
void QStandardItemModel_OnBeginInsertRows(QStandardItemModel* self, intptr_t slot);
void QStandardItemModel_QBaseBeginInsertRows(QStandardItemModel* self, QModelIndex* parent, int first, int last);
void QStandardItemModel_EndInsertRows(QStandardItemModel* self);
void QStandardItemModel_OnEndInsertRows(QStandardItemModel* self, intptr_t slot);
void QStandardItemModel_QBaseEndInsertRows(QStandardItemModel* self);
void QStandardItemModel_BeginRemoveRows(QStandardItemModel* self, QModelIndex* parent, int first, int last);
void QStandardItemModel_OnBeginRemoveRows(QStandardItemModel* self, intptr_t slot);
void QStandardItemModel_QBaseBeginRemoveRows(QStandardItemModel* self, QModelIndex* parent, int first, int last);
void QStandardItemModel_EndRemoveRows(QStandardItemModel* self);
void QStandardItemModel_OnEndRemoveRows(QStandardItemModel* self, intptr_t slot);
void QStandardItemModel_QBaseEndRemoveRows(QStandardItemModel* self);
bool QStandardItemModel_BeginMoveRows(QStandardItemModel* self, QModelIndex* sourceParent, int sourceFirst, int sourceLast, QModelIndex* destinationParent, int destinationRow);
void QStandardItemModel_OnBeginMoveRows(QStandardItemModel* self, intptr_t slot);
bool QStandardItemModel_QBaseBeginMoveRows(QStandardItemModel* self, QModelIndex* sourceParent, int sourceFirst, int sourceLast, QModelIndex* destinationParent, int destinationRow);
void QStandardItemModel_EndMoveRows(QStandardItemModel* self);
void QStandardItemModel_OnEndMoveRows(QStandardItemModel* self, intptr_t slot);
void QStandardItemModel_QBaseEndMoveRows(QStandardItemModel* self);
void QStandardItemModel_BeginInsertColumns(QStandardItemModel* self, QModelIndex* parent, int first, int last);
void QStandardItemModel_OnBeginInsertColumns(QStandardItemModel* self, intptr_t slot);
void QStandardItemModel_QBaseBeginInsertColumns(QStandardItemModel* self, QModelIndex* parent, int first, int last);
void QStandardItemModel_EndInsertColumns(QStandardItemModel* self);
void QStandardItemModel_OnEndInsertColumns(QStandardItemModel* self, intptr_t slot);
void QStandardItemModel_QBaseEndInsertColumns(QStandardItemModel* self);
void QStandardItemModel_BeginRemoveColumns(QStandardItemModel* self, QModelIndex* parent, int first, int last);
void QStandardItemModel_OnBeginRemoveColumns(QStandardItemModel* self, intptr_t slot);
void QStandardItemModel_QBaseBeginRemoveColumns(QStandardItemModel* self, QModelIndex* parent, int first, int last);
void QStandardItemModel_EndRemoveColumns(QStandardItemModel* self);
void QStandardItemModel_OnEndRemoveColumns(QStandardItemModel* self, intptr_t slot);
void QStandardItemModel_QBaseEndRemoveColumns(QStandardItemModel* self);
bool QStandardItemModel_BeginMoveColumns(QStandardItemModel* self, QModelIndex* sourceParent, int sourceFirst, int sourceLast, QModelIndex* destinationParent, int destinationColumn);
void QStandardItemModel_OnBeginMoveColumns(QStandardItemModel* self, intptr_t slot);
bool QStandardItemModel_QBaseBeginMoveColumns(QStandardItemModel* self, QModelIndex* sourceParent, int sourceFirst, int sourceLast, QModelIndex* destinationParent, int destinationColumn);
void QStandardItemModel_EndMoveColumns(QStandardItemModel* self);
void QStandardItemModel_OnEndMoveColumns(QStandardItemModel* self, intptr_t slot);
void QStandardItemModel_QBaseEndMoveColumns(QStandardItemModel* self);
void QStandardItemModel_BeginResetModel(QStandardItemModel* self);
void QStandardItemModel_OnBeginResetModel(QStandardItemModel* self, intptr_t slot);
void QStandardItemModel_QBaseBeginResetModel(QStandardItemModel* self);
void QStandardItemModel_EndResetModel(QStandardItemModel* self);
void QStandardItemModel_OnEndResetModel(QStandardItemModel* self, intptr_t slot);
void QStandardItemModel_QBaseEndResetModel(QStandardItemModel* self);
void QStandardItemModel_ChangePersistentIndex(QStandardItemModel* self, QModelIndex* from, QModelIndex* to);
void QStandardItemModel_OnChangePersistentIndex(QStandardItemModel* self, intptr_t slot);
void QStandardItemModel_QBaseChangePersistentIndex(QStandardItemModel* self, QModelIndex* from, QModelIndex* to);
void QStandardItemModel_ChangePersistentIndexList(QStandardItemModel* self, libqt_list /* of QModelIndex* */ from, libqt_list /* of QModelIndex* */ to);
void QStandardItemModel_OnChangePersistentIndexList(QStandardItemModel* self, intptr_t slot);
void QStandardItemModel_QBaseChangePersistentIndexList(QStandardItemModel* self, libqt_list /* of QModelIndex* */ from, libqt_list /* of QModelIndex* */ to);
libqt_list /* of QModelIndex* */ QStandardItemModel_PersistentIndexList(const QStandardItemModel* self);
void QStandardItemModel_OnPersistentIndexList(const QStandardItemModel* self, intptr_t slot);
libqt_list /* of QModelIndex* */ QStandardItemModel_QBasePersistentIndexList(const QStandardItemModel* self);
QObject* QStandardItemModel_Sender(const QStandardItemModel* self);
void QStandardItemModel_OnSender(const QStandardItemModel* self, intptr_t slot);
QObject* QStandardItemModel_QBaseSender(const QStandardItemModel* self);
int QStandardItemModel_SenderSignalIndex(const QStandardItemModel* self);
void QStandardItemModel_OnSenderSignalIndex(const QStandardItemModel* self, intptr_t slot);
int QStandardItemModel_QBaseSenderSignalIndex(const QStandardItemModel* self);
int QStandardItemModel_Receivers(const QStandardItemModel* self, const char* signal);
void QStandardItemModel_OnReceivers(const QStandardItemModel* self, intptr_t slot);
int QStandardItemModel_QBaseReceivers(const QStandardItemModel* self, const char* signal);
bool QStandardItemModel_IsSignalConnected(const QStandardItemModel* self, QMetaMethod* signal);
void QStandardItemModel_OnIsSignalConnected(const QStandardItemModel* self, intptr_t slot);
bool QStandardItemModel_QBaseIsSignalConnected(const QStandardItemModel* self, QMetaMethod* signal);
void QStandardItemModel_Delete(QStandardItemModel* self);

#ifdef __cplusplus
} /* extern C */
#endif

#endif
