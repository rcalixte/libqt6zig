#pragma once
#ifndef SRCC_LIBQSORTFILTERPROXYMODEL_H
#define SRCC_LIBQSORTFILTERPROXYMODEL_H

#include <stdbool.h>
#include <stddef.h>
#include <stdint.h>

#pragma GCC diagnostic ignored "-Wdeprecated-declarations"

#include "qtlibc.h"

#ifdef __cplusplus
extern "C" {
#endif

#ifdef __cplusplus
#if defined(WORKAROUND_INNER_CLASS_DEFINITION_QMetaObject__Connection)
typedef QMetaObject::Connection QMetaObject__Connection;
#endif
#else
typedef struct QAbstractItemModel QAbstractItemModel;
typedef struct QAbstractProxyModel QAbstractProxyModel;
typedef struct QAnyStringView QAnyStringView;
typedef struct QBindingStorage QBindingStorage;
typedef struct QChildEvent QChildEvent;
typedef struct QDataStream QDataStream;
typedef struct QEvent QEvent;
typedef struct QItemSelection QItemSelection;
typedef struct QMetaMethod QMetaMethod;
typedef struct QMetaObject QMetaObject;
typedef struct QMetaObject__Connection QMetaObject__Connection;
typedef struct QMimeData QMimeData;
typedef struct QModelIndex QModelIndex;
typedef struct QModelRoleDataSpan QModelRoleDataSpan;
typedef struct QObject QObject;
typedef struct QPersistentModelIndex QPersistentModelIndex;
typedef struct QRegularExpression QRegularExpression;
typedef struct QSize QSize;
typedef struct QSortFilterProxyModel QSortFilterProxyModel;
typedef struct QThread QThread;
typedef struct QTimerEvent QTimerEvent;
typedef struct QVariant QVariant;
#endif

QSortFilterProxyModel* QSortFilterProxyModel_new();
QSortFilterProxyModel* QSortFilterProxyModel_new2(QObject* parent);
QMetaObject* QSortFilterProxyModel_MetaObject(const QSortFilterProxyModel* self);
void* QSortFilterProxyModel_Metacast(QSortFilterProxyModel* self, const char* param1);
int QSortFilterProxyModel_Metacall(QSortFilterProxyModel* self, int param1, int param2, void** param3);
void QSortFilterProxyModel_OnMetacall(QSortFilterProxyModel* self, intptr_t slot);
int QSortFilterProxyModel_QBaseMetacall(QSortFilterProxyModel* self, int param1, int param2, void** param3);
libqt_string QSortFilterProxyModel_Tr(const char* s);
void QSortFilterProxyModel_SetSourceModel(QSortFilterProxyModel* self, QAbstractItemModel* sourceModel);
void QSortFilterProxyModel_OnSetSourceModel(QSortFilterProxyModel* self, intptr_t slot);
void QSortFilterProxyModel_QBaseSetSourceModel(QSortFilterProxyModel* self, QAbstractItemModel* sourceModel);
QModelIndex* QSortFilterProxyModel_MapToSource(const QSortFilterProxyModel* self, QModelIndex* proxyIndex);
void QSortFilterProxyModel_OnMapToSource(const QSortFilterProxyModel* self, intptr_t slot);
QModelIndex* QSortFilterProxyModel_QBaseMapToSource(const QSortFilterProxyModel* self, QModelIndex* proxyIndex);
QModelIndex* QSortFilterProxyModel_MapFromSource(const QSortFilterProxyModel* self, QModelIndex* sourceIndex);
void QSortFilterProxyModel_OnMapFromSource(const QSortFilterProxyModel* self, intptr_t slot);
QModelIndex* QSortFilterProxyModel_QBaseMapFromSource(const QSortFilterProxyModel* self, QModelIndex* sourceIndex);
QItemSelection* QSortFilterProxyModel_MapSelectionToSource(const QSortFilterProxyModel* self, QItemSelection* proxySelection);
void QSortFilterProxyModel_OnMapSelectionToSource(const QSortFilterProxyModel* self, intptr_t slot);
QItemSelection* QSortFilterProxyModel_QBaseMapSelectionToSource(const QSortFilterProxyModel* self, QItemSelection* proxySelection);
QItemSelection* QSortFilterProxyModel_MapSelectionFromSource(const QSortFilterProxyModel* self, QItemSelection* sourceSelection);
void QSortFilterProxyModel_OnMapSelectionFromSource(const QSortFilterProxyModel* self, intptr_t slot);
QItemSelection* QSortFilterProxyModel_QBaseMapSelectionFromSource(const QSortFilterProxyModel* self, QItemSelection* sourceSelection);
QRegularExpression* QSortFilterProxyModel_FilterRegularExpression(const QSortFilterProxyModel* self);
int QSortFilterProxyModel_FilterKeyColumn(const QSortFilterProxyModel* self);
void QSortFilterProxyModel_SetFilterKeyColumn(QSortFilterProxyModel* self, int column);
int QSortFilterProxyModel_FilterCaseSensitivity(const QSortFilterProxyModel* self);
void QSortFilterProxyModel_SetFilterCaseSensitivity(QSortFilterProxyModel* self, int cs);
int QSortFilterProxyModel_SortCaseSensitivity(const QSortFilterProxyModel* self);
void QSortFilterProxyModel_SetSortCaseSensitivity(QSortFilterProxyModel* self, int cs);
bool QSortFilterProxyModel_IsSortLocaleAware(const QSortFilterProxyModel* self);
void QSortFilterProxyModel_SetSortLocaleAware(QSortFilterProxyModel* self, bool on);
int QSortFilterProxyModel_SortColumn(const QSortFilterProxyModel* self);
int QSortFilterProxyModel_SortOrder(const QSortFilterProxyModel* self);
bool QSortFilterProxyModel_DynamicSortFilter(const QSortFilterProxyModel* self);
void QSortFilterProxyModel_SetDynamicSortFilter(QSortFilterProxyModel* self, bool enable);
int QSortFilterProxyModel_SortRole(const QSortFilterProxyModel* self);
void QSortFilterProxyModel_SetSortRole(QSortFilterProxyModel* self, int role);
int QSortFilterProxyModel_FilterRole(const QSortFilterProxyModel* self);
void QSortFilterProxyModel_SetFilterRole(QSortFilterProxyModel* self, int role);
bool QSortFilterProxyModel_IsRecursiveFilteringEnabled(const QSortFilterProxyModel* self);
void QSortFilterProxyModel_SetRecursiveFilteringEnabled(QSortFilterProxyModel* self, bool recursive);
bool QSortFilterProxyModel_AutoAcceptChildRows(const QSortFilterProxyModel* self);
void QSortFilterProxyModel_SetAutoAcceptChildRows(QSortFilterProxyModel* self, bool accept);
void QSortFilterProxyModel_SetFilterRegularExpression(QSortFilterProxyModel* self, libqt_string pattern);
void QSortFilterProxyModel_SetFilterRegularExpressionWithRegularExpression(QSortFilterProxyModel* self, QRegularExpression* regularExpression);
void QSortFilterProxyModel_SetFilterWildcard(QSortFilterProxyModel* self, libqt_string pattern);
void QSortFilterProxyModel_SetFilterFixedString(QSortFilterProxyModel* self, libqt_string pattern);
void QSortFilterProxyModel_Invalidate(QSortFilterProxyModel* self);
bool QSortFilterProxyModel_FilterAcceptsRow(const QSortFilterProxyModel* self, int source_row, QModelIndex* source_parent);
void QSortFilterProxyModel_OnFilterAcceptsRow(const QSortFilterProxyModel* self, intptr_t slot);
bool QSortFilterProxyModel_QBaseFilterAcceptsRow(const QSortFilterProxyModel* self, int source_row, QModelIndex* source_parent);
bool QSortFilterProxyModel_FilterAcceptsColumn(const QSortFilterProxyModel* self, int source_column, QModelIndex* source_parent);
void QSortFilterProxyModel_OnFilterAcceptsColumn(const QSortFilterProxyModel* self, intptr_t slot);
bool QSortFilterProxyModel_QBaseFilterAcceptsColumn(const QSortFilterProxyModel* self, int source_column, QModelIndex* source_parent);
bool QSortFilterProxyModel_LessThan(const QSortFilterProxyModel* self, QModelIndex* source_left, QModelIndex* source_right);
void QSortFilterProxyModel_OnLessThan(const QSortFilterProxyModel* self, intptr_t slot);
bool QSortFilterProxyModel_QBaseLessThan(const QSortFilterProxyModel* self, QModelIndex* source_left, QModelIndex* source_right);
QModelIndex* QSortFilterProxyModel_Index(const QSortFilterProxyModel* self, int row, int column, QModelIndex* parent);
void QSortFilterProxyModel_OnIndex(const QSortFilterProxyModel* self, intptr_t slot);
QModelIndex* QSortFilterProxyModel_QBaseIndex(const QSortFilterProxyModel* self, int row, int column, QModelIndex* parent);
QModelIndex* QSortFilterProxyModel_Parent(const QSortFilterProxyModel* self, QModelIndex* child);
void QSortFilterProxyModel_OnParent(const QSortFilterProxyModel* self, intptr_t slot);
QModelIndex* QSortFilterProxyModel_QBaseParent(const QSortFilterProxyModel* self, QModelIndex* child);
QModelIndex* QSortFilterProxyModel_Sibling(const QSortFilterProxyModel* self, int row, int column, QModelIndex* idx);
void QSortFilterProxyModel_OnSibling(const QSortFilterProxyModel* self, intptr_t slot);
QModelIndex* QSortFilterProxyModel_QBaseSibling(const QSortFilterProxyModel* self, int row, int column, QModelIndex* idx);
int QSortFilterProxyModel_RowCount(const QSortFilterProxyModel* self, QModelIndex* parent);
void QSortFilterProxyModel_OnRowCount(const QSortFilterProxyModel* self, intptr_t slot);
int QSortFilterProxyModel_QBaseRowCount(const QSortFilterProxyModel* self, QModelIndex* parent);
int QSortFilterProxyModel_ColumnCount(const QSortFilterProxyModel* self, QModelIndex* parent);
void QSortFilterProxyModel_OnColumnCount(const QSortFilterProxyModel* self, intptr_t slot);
int QSortFilterProxyModel_QBaseColumnCount(const QSortFilterProxyModel* self, QModelIndex* parent);
bool QSortFilterProxyModel_HasChildren(const QSortFilterProxyModel* self, QModelIndex* parent);
void QSortFilterProxyModel_OnHasChildren(const QSortFilterProxyModel* self, intptr_t slot);
bool QSortFilterProxyModel_QBaseHasChildren(const QSortFilterProxyModel* self, QModelIndex* parent);
QVariant* QSortFilterProxyModel_Data(const QSortFilterProxyModel* self, QModelIndex* index, int role);
void QSortFilterProxyModel_OnData(const QSortFilterProxyModel* self, intptr_t slot);
QVariant* QSortFilterProxyModel_QBaseData(const QSortFilterProxyModel* self, QModelIndex* index, int role);
bool QSortFilterProxyModel_SetData(QSortFilterProxyModel* self, QModelIndex* index, QVariant* value, int role);
void QSortFilterProxyModel_OnSetData(QSortFilterProxyModel* self, intptr_t slot);
bool QSortFilterProxyModel_QBaseSetData(QSortFilterProxyModel* self, QModelIndex* index, QVariant* value, int role);
QVariant* QSortFilterProxyModel_HeaderData(const QSortFilterProxyModel* self, int section, int orientation, int role);
void QSortFilterProxyModel_OnHeaderData(const QSortFilterProxyModel* self, intptr_t slot);
QVariant* QSortFilterProxyModel_QBaseHeaderData(const QSortFilterProxyModel* self, int section, int orientation, int role);
bool QSortFilterProxyModel_SetHeaderData(QSortFilterProxyModel* self, int section, int orientation, QVariant* value, int role);
void QSortFilterProxyModel_OnSetHeaderData(QSortFilterProxyModel* self, intptr_t slot);
bool QSortFilterProxyModel_QBaseSetHeaderData(QSortFilterProxyModel* self, int section, int orientation, QVariant* value, int role);
QMimeData* QSortFilterProxyModel_MimeData(const QSortFilterProxyModel* self, libqt_list /* of QModelIndex* */ indexes);
void QSortFilterProxyModel_OnMimeData(const QSortFilterProxyModel* self, intptr_t slot);
QMimeData* QSortFilterProxyModel_QBaseMimeData(const QSortFilterProxyModel* self, libqt_list /* of QModelIndex* */ indexes);
bool QSortFilterProxyModel_DropMimeData(QSortFilterProxyModel* self, QMimeData* data, int action, int row, int column, QModelIndex* parent);
void QSortFilterProxyModel_OnDropMimeData(QSortFilterProxyModel* self, intptr_t slot);
bool QSortFilterProxyModel_QBaseDropMimeData(QSortFilterProxyModel* self, QMimeData* data, int action, int row, int column, QModelIndex* parent);
bool QSortFilterProxyModel_InsertRows(QSortFilterProxyModel* self, int row, int count, QModelIndex* parent);
void QSortFilterProxyModel_OnInsertRows(QSortFilterProxyModel* self, intptr_t slot);
bool QSortFilterProxyModel_QBaseInsertRows(QSortFilterProxyModel* self, int row, int count, QModelIndex* parent);
bool QSortFilterProxyModel_InsertColumns(QSortFilterProxyModel* self, int column, int count, QModelIndex* parent);
void QSortFilterProxyModel_OnInsertColumns(QSortFilterProxyModel* self, intptr_t slot);
bool QSortFilterProxyModel_QBaseInsertColumns(QSortFilterProxyModel* self, int column, int count, QModelIndex* parent);
bool QSortFilterProxyModel_RemoveRows(QSortFilterProxyModel* self, int row, int count, QModelIndex* parent);
void QSortFilterProxyModel_OnRemoveRows(QSortFilterProxyModel* self, intptr_t slot);
bool QSortFilterProxyModel_QBaseRemoveRows(QSortFilterProxyModel* self, int row, int count, QModelIndex* parent);
bool QSortFilterProxyModel_RemoveColumns(QSortFilterProxyModel* self, int column, int count, QModelIndex* parent);
void QSortFilterProxyModel_OnRemoveColumns(QSortFilterProxyModel* self, intptr_t slot);
bool QSortFilterProxyModel_QBaseRemoveColumns(QSortFilterProxyModel* self, int column, int count, QModelIndex* parent);
void QSortFilterProxyModel_FetchMore(QSortFilterProxyModel* self, QModelIndex* parent);
void QSortFilterProxyModel_OnFetchMore(QSortFilterProxyModel* self, intptr_t slot);
void QSortFilterProxyModel_QBaseFetchMore(QSortFilterProxyModel* self, QModelIndex* parent);
bool QSortFilterProxyModel_CanFetchMore(const QSortFilterProxyModel* self, QModelIndex* parent);
void QSortFilterProxyModel_OnCanFetchMore(const QSortFilterProxyModel* self, intptr_t slot);
bool QSortFilterProxyModel_QBaseCanFetchMore(const QSortFilterProxyModel* self, QModelIndex* parent);
int QSortFilterProxyModel_Flags(const QSortFilterProxyModel* self, QModelIndex* index);
void QSortFilterProxyModel_OnFlags(const QSortFilterProxyModel* self, intptr_t slot);
int QSortFilterProxyModel_QBaseFlags(const QSortFilterProxyModel* self, QModelIndex* index);
QModelIndex* QSortFilterProxyModel_Buddy(const QSortFilterProxyModel* self, QModelIndex* index);
void QSortFilterProxyModel_OnBuddy(const QSortFilterProxyModel* self, intptr_t slot);
QModelIndex* QSortFilterProxyModel_QBaseBuddy(const QSortFilterProxyModel* self, QModelIndex* index);
libqt_list /* of QModelIndex* */ QSortFilterProxyModel_Match(const QSortFilterProxyModel* self, QModelIndex* start, int role, QVariant* value, int hits, int flags);
void QSortFilterProxyModel_OnMatch(const QSortFilterProxyModel* self, intptr_t slot);
libqt_list /* of QModelIndex* */ QSortFilterProxyModel_QBaseMatch(const QSortFilterProxyModel* self, QModelIndex* start, int role, QVariant* value, int hits, int flags);
QSize* QSortFilterProxyModel_Span(const QSortFilterProxyModel* self, QModelIndex* index);
void QSortFilterProxyModel_OnSpan(const QSortFilterProxyModel* self, intptr_t slot);
QSize* QSortFilterProxyModel_QBaseSpan(const QSortFilterProxyModel* self, QModelIndex* index);
void QSortFilterProxyModel_Sort(QSortFilterProxyModel* self, int column, int order);
void QSortFilterProxyModel_OnSort(QSortFilterProxyModel* self, intptr_t slot);
void QSortFilterProxyModel_QBaseSort(QSortFilterProxyModel* self, int column, int order);
libqt_list /* of libqt_string */ QSortFilterProxyModel_MimeTypes(const QSortFilterProxyModel* self);
void QSortFilterProxyModel_OnMimeTypes(const QSortFilterProxyModel* self, intptr_t slot);
libqt_list /* of libqt_string */ QSortFilterProxyModel_QBaseMimeTypes(const QSortFilterProxyModel* self);
int QSortFilterProxyModel_SupportedDropActions(const QSortFilterProxyModel* self);
void QSortFilterProxyModel_OnSupportedDropActions(const QSortFilterProxyModel* self, intptr_t slot);
int QSortFilterProxyModel_QBaseSupportedDropActions(const QSortFilterProxyModel* self);
void QSortFilterProxyModel_DynamicSortFilterChanged(QSortFilterProxyModel* self, bool dynamicSortFilter);
void QSortFilterProxyModel_Connect_DynamicSortFilterChanged(QSortFilterProxyModel* self, intptr_t slot);
void QSortFilterProxyModel_FilterCaseSensitivityChanged(QSortFilterProxyModel* self, int filterCaseSensitivity);
void QSortFilterProxyModel_Connect_FilterCaseSensitivityChanged(QSortFilterProxyModel* self, intptr_t slot);
void QSortFilterProxyModel_SortCaseSensitivityChanged(QSortFilterProxyModel* self, int sortCaseSensitivity);
void QSortFilterProxyModel_Connect_SortCaseSensitivityChanged(QSortFilterProxyModel* self, intptr_t slot);
void QSortFilterProxyModel_SortLocaleAwareChanged(QSortFilterProxyModel* self, bool sortLocaleAware);
void QSortFilterProxyModel_Connect_SortLocaleAwareChanged(QSortFilterProxyModel* self, intptr_t slot);
void QSortFilterProxyModel_SortRoleChanged(QSortFilterProxyModel* self, int sortRole);
void QSortFilterProxyModel_Connect_SortRoleChanged(QSortFilterProxyModel* self, intptr_t slot);
void QSortFilterProxyModel_FilterRoleChanged(QSortFilterProxyModel* self, int filterRole);
void QSortFilterProxyModel_Connect_FilterRoleChanged(QSortFilterProxyModel* self, intptr_t slot);
void QSortFilterProxyModel_RecursiveFilteringEnabledChanged(QSortFilterProxyModel* self, bool recursiveFilteringEnabled);
void QSortFilterProxyModel_Connect_RecursiveFilteringEnabledChanged(QSortFilterProxyModel* self, intptr_t slot);
void QSortFilterProxyModel_AutoAcceptChildRowsChanged(QSortFilterProxyModel* self, bool autoAcceptChildRows);
void QSortFilterProxyModel_Connect_AutoAcceptChildRowsChanged(QSortFilterProxyModel* self, intptr_t slot);
libqt_string QSortFilterProxyModel_Tr2(const char* s, const char* c);
libqt_string QSortFilterProxyModel_Tr3(const char* s, const char* c, int n);
bool QSortFilterProxyModel_Submit(QSortFilterProxyModel* self);
void QSortFilterProxyModel_OnSubmit(QSortFilterProxyModel* self, intptr_t slot);
bool QSortFilterProxyModel_QBaseSubmit(QSortFilterProxyModel* self);
void QSortFilterProxyModel_Revert(QSortFilterProxyModel* self);
void QSortFilterProxyModel_OnRevert(QSortFilterProxyModel* self, intptr_t slot);
void QSortFilterProxyModel_QBaseRevert(QSortFilterProxyModel* self);
libqt_map /* of int to QVariant* */ QSortFilterProxyModel_ItemData(const QSortFilterProxyModel* self, QModelIndex* index);
void QSortFilterProxyModel_OnItemData(const QSortFilterProxyModel* self, intptr_t slot);
libqt_map /* of int to QVariant* */ QSortFilterProxyModel_QBaseItemData(const QSortFilterProxyModel* self, QModelIndex* index);
bool QSortFilterProxyModel_SetItemData(QSortFilterProxyModel* self, QModelIndex* index, libqt_map /* of int to QVariant* */ roles);
void QSortFilterProxyModel_OnSetItemData(QSortFilterProxyModel* self, intptr_t slot);
bool QSortFilterProxyModel_QBaseSetItemData(QSortFilterProxyModel* self, QModelIndex* index, libqt_map /* of int to QVariant* */ roles);
bool QSortFilterProxyModel_ClearItemData(QSortFilterProxyModel* self, QModelIndex* index);
void QSortFilterProxyModel_OnClearItemData(QSortFilterProxyModel* self, intptr_t slot);
bool QSortFilterProxyModel_QBaseClearItemData(QSortFilterProxyModel* self, QModelIndex* index);
bool QSortFilterProxyModel_CanDropMimeData(const QSortFilterProxyModel* self, QMimeData* data, int action, int row, int column, QModelIndex* parent);
void QSortFilterProxyModel_OnCanDropMimeData(const QSortFilterProxyModel* self, intptr_t slot);
bool QSortFilterProxyModel_QBaseCanDropMimeData(const QSortFilterProxyModel* self, QMimeData* data, int action, int row, int column, QModelIndex* parent);
int QSortFilterProxyModel_SupportedDragActions(const QSortFilterProxyModel* self);
void QSortFilterProxyModel_OnSupportedDragActions(const QSortFilterProxyModel* self, intptr_t slot);
int QSortFilterProxyModel_QBaseSupportedDragActions(const QSortFilterProxyModel* self);
libqt_map /* of int to libqt_string */ QSortFilterProxyModel_RoleNames(const QSortFilterProxyModel* self);
void QSortFilterProxyModel_OnRoleNames(const QSortFilterProxyModel* self, intptr_t slot);
libqt_map /* of int to libqt_string */ QSortFilterProxyModel_QBaseRoleNames(const QSortFilterProxyModel* self);
bool QSortFilterProxyModel_MoveRows(QSortFilterProxyModel* self, QModelIndex* sourceParent, int sourceRow, int count, QModelIndex* destinationParent, int destinationChild);
void QSortFilterProxyModel_OnMoveRows(QSortFilterProxyModel* self, intptr_t slot);
bool QSortFilterProxyModel_QBaseMoveRows(QSortFilterProxyModel* self, QModelIndex* sourceParent, int sourceRow, int count, QModelIndex* destinationParent, int destinationChild);
bool QSortFilterProxyModel_MoveColumns(QSortFilterProxyModel* self, QModelIndex* sourceParent, int sourceColumn, int count, QModelIndex* destinationParent, int destinationChild);
void QSortFilterProxyModel_OnMoveColumns(QSortFilterProxyModel* self, intptr_t slot);
bool QSortFilterProxyModel_QBaseMoveColumns(QSortFilterProxyModel* self, QModelIndex* sourceParent, int sourceColumn, int count, QModelIndex* destinationParent, int destinationChild);
void QSortFilterProxyModel_MultiData(const QSortFilterProxyModel* self, QModelIndex* index, QModelRoleDataSpan* roleDataSpan);
void QSortFilterProxyModel_OnMultiData(const QSortFilterProxyModel* self, intptr_t slot);
void QSortFilterProxyModel_QBaseMultiData(const QSortFilterProxyModel* self, QModelIndex* index, QModelRoleDataSpan* roleDataSpan);
void QSortFilterProxyModel_ResetInternalData(QSortFilterProxyModel* self);
void QSortFilterProxyModel_OnResetInternalData(QSortFilterProxyModel* self, intptr_t slot);
void QSortFilterProxyModel_QBaseResetInternalData(QSortFilterProxyModel* self);
bool QSortFilterProxyModel_Event(QSortFilterProxyModel* self, QEvent* event);
void QSortFilterProxyModel_OnEvent(QSortFilterProxyModel* self, intptr_t slot);
bool QSortFilterProxyModel_QBaseEvent(QSortFilterProxyModel* self, QEvent* event);
bool QSortFilterProxyModel_EventFilter(QSortFilterProxyModel* self, QObject* watched, QEvent* event);
void QSortFilterProxyModel_OnEventFilter(QSortFilterProxyModel* self, intptr_t slot);
bool QSortFilterProxyModel_QBaseEventFilter(QSortFilterProxyModel* self, QObject* watched, QEvent* event);
void QSortFilterProxyModel_TimerEvent(QSortFilterProxyModel* self, QTimerEvent* event);
void QSortFilterProxyModel_OnTimerEvent(QSortFilterProxyModel* self, intptr_t slot);
void QSortFilterProxyModel_QBaseTimerEvent(QSortFilterProxyModel* self, QTimerEvent* event);
void QSortFilterProxyModel_ChildEvent(QSortFilterProxyModel* self, QChildEvent* event);
void QSortFilterProxyModel_OnChildEvent(QSortFilterProxyModel* self, intptr_t slot);
void QSortFilterProxyModel_QBaseChildEvent(QSortFilterProxyModel* self, QChildEvent* event);
void QSortFilterProxyModel_CustomEvent(QSortFilterProxyModel* self, QEvent* event);
void QSortFilterProxyModel_OnCustomEvent(QSortFilterProxyModel* self, intptr_t slot);
void QSortFilterProxyModel_QBaseCustomEvent(QSortFilterProxyModel* self, QEvent* event);
void QSortFilterProxyModel_ConnectNotify(QSortFilterProxyModel* self, QMetaMethod* signal);
void QSortFilterProxyModel_OnConnectNotify(QSortFilterProxyModel* self, intptr_t slot);
void QSortFilterProxyModel_QBaseConnectNotify(QSortFilterProxyModel* self, QMetaMethod* signal);
void QSortFilterProxyModel_DisconnectNotify(QSortFilterProxyModel* self, QMetaMethod* signal);
void QSortFilterProxyModel_OnDisconnectNotify(QSortFilterProxyModel* self, intptr_t slot);
void QSortFilterProxyModel_QBaseDisconnectNotify(QSortFilterProxyModel* self, QMetaMethod* signal);
void QSortFilterProxyModel_InvalidateFilter(QSortFilterProxyModel* self);
void QSortFilterProxyModel_OnInvalidateFilter(QSortFilterProxyModel* self, intptr_t slot);
void QSortFilterProxyModel_QBaseInvalidateFilter(QSortFilterProxyModel* self);
void QSortFilterProxyModel_InvalidateRowsFilter(QSortFilterProxyModel* self);
void QSortFilterProxyModel_OnInvalidateRowsFilter(QSortFilterProxyModel* self, intptr_t slot);
void QSortFilterProxyModel_QBaseInvalidateRowsFilter(QSortFilterProxyModel* self);
void QSortFilterProxyModel_InvalidateColumnsFilter(QSortFilterProxyModel* self);
void QSortFilterProxyModel_OnInvalidateColumnsFilter(QSortFilterProxyModel* self, intptr_t slot);
void QSortFilterProxyModel_QBaseInvalidateColumnsFilter(QSortFilterProxyModel* self);
QModelIndex* QSortFilterProxyModel_CreateSourceIndex(const QSortFilterProxyModel* self, int row, int col, void* internalPtr);
void QSortFilterProxyModel_OnCreateSourceIndex(const QSortFilterProxyModel* self, intptr_t slot);
QModelIndex* QSortFilterProxyModel_QBaseCreateSourceIndex(const QSortFilterProxyModel* self, int row, int col, void* internalPtr);
QModelIndex* QSortFilterProxyModel_CreateIndex(const QSortFilterProxyModel* self, int row, int column);
void QSortFilterProxyModel_OnCreateIndex(const QSortFilterProxyModel* self, intptr_t slot);
QModelIndex* QSortFilterProxyModel_QBaseCreateIndex(const QSortFilterProxyModel* self, int row, int column);
void QSortFilterProxyModel_EncodeData(const QSortFilterProxyModel* self, libqt_list /* of QModelIndex* */ indexes, QDataStream* stream);
void QSortFilterProxyModel_OnEncodeData(const QSortFilterProxyModel* self, intptr_t slot);
void QSortFilterProxyModel_QBaseEncodeData(const QSortFilterProxyModel* self, libqt_list /* of QModelIndex* */ indexes, QDataStream* stream);
bool QSortFilterProxyModel_DecodeData(QSortFilterProxyModel* self, int row, int column, QModelIndex* parent, QDataStream* stream);
void QSortFilterProxyModel_OnDecodeData(QSortFilterProxyModel* self, intptr_t slot);
bool QSortFilterProxyModel_QBaseDecodeData(QSortFilterProxyModel* self, int row, int column, QModelIndex* parent, QDataStream* stream);
void QSortFilterProxyModel_BeginInsertRows(QSortFilterProxyModel* self, QModelIndex* parent, int first, int last);
void QSortFilterProxyModel_OnBeginInsertRows(QSortFilterProxyModel* self, intptr_t slot);
void QSortFilterProxyModel_QBaseBeginInsertRows(QSortFilterProxyModel* self, QModelIndex* parent, int first, int last);
void QSortFilterProxyModel_EndInsertRows(QSortFilterProxyModel* self);
void QSortFilterProxyModel_OnEndInsertRows(QSortFilterProxyModel* self, intptr_t slot);
void QSortFilterProxyModel_QBaseEndInsertRows(QSortFilterProxyModel* self);
void QSortFilterProxyModel_BeginRemoveRows(QSortFilterProxyModel* self, QModelIndex* parent, int first, int last);
void QSortFilterProxyModel_OnBeginRemoveRows(QSortFilterProxyModel* self, intptr_t slot);
void QSortFilterProxyModel_QBaseBeginRemoveRows(QSortFilterProxyModel* self, QModelIndex* parent, int first, int last);
void QSortFilterProxyModel_EndRemoveRows(QSortFilterProxyModel* self);
void QSortFilterProxyModel_OnEndRemoveRows(QSortFilterProxyModel* self, intptr_t slot);
void QSortFilterProxyModel_QBaseEndRemoveRows(QSortFilterProxyModel* self);
bool QSortFilterProxyModel_BeginMoveRows(QSortFilterProxyModel* self, QModelIndex* sourceParent, int sourceFirst, int sourceLast, QModelIndex* destinationParent, int destinationRow);
void QSortFilterProxyModel_OnBeginMoveRows(QSortFilterProxyModel* self, intptr_t slot);
bool QSortFilterProxyModel_QBaseBeginMoveRows(QSortFilterProxyModel* self, QModelIndex* sourceParent, int sourceFirst, int sourceLast, QModelIndex* destinationParent, int destinationRow);
void QSortFilterProxyModel_EndMoveRows(QSortFilterProxyModel* self);
void QSortFilterProxyModel_OnEndMoveRows(QSortFilterProxyModel* self, intptr_t slot);
void QSortFilterProxyModel_QBaseEndMoveRows(QSortFilterProxyModel* self);
void QSortFilterProxyModel_BeginInsertColumns(QSortFilterProxyModel* self, QModelIndex* parent, int first, int last);
void QSortFilterProxyModel_OnBeginInsertColumns(QSortFilterProxyModel* self, intptr_t slot);
void QSortFilterProxyModel_QBaseBeginInsertColumns(QSortFilterProxyModel* self, QModelIndex* parent, int first, int last);
void QSortFilterProxyModel_EndInsertColumns(QSortFilterProxyModel* self);
void QSortFilterProxyModel_OnEndInsertColumns(QSortFilterProxyModel* self, intptr_t slot);
void QSortFilterProxyModel_QBaseEndInsertColumns(QSortFilterProxyModel* self);
void QSortFilterProxyModel_BeginRemoveColumns(QSortFilterProxyModel* self, QModelIndex* parent, int first, int last);
void QSortFilterProxyModel_OnBeginRemoveColumns(QSortFilterProxyModel* self, intptr_t slot);
void QSortFilterProxyModel_QBaseBeginRemoveColumns(QSortFilterProxyModel* self, QModelIndex* parent, int first, int last);
void QSortFilterProxyModel_EndRemoveColumns(QSortFilterProxyModel* self);
void QSortFilterProxyModel_OnEndRemoveColumns(QSortFilterProxyModel* self, intptr_t slot);
void QSortFilterProxyModel_QBaseEndRemoveColumns(QSortFilterProxyModel* self);
bool QSortFilterProxyModel_BeginMoveColumns(QSortFilterProxyModel* self, QModelIndex* sourceParent, int sourceFirst, int sourceLast, QModelIndex* destinationParent, int destinationColumn);
void QSortFilterProxyModel_OnBeginMoveColumns(QSortFilterProxyModel* self, intptr_t slot);
bool QSortFilterProxyModel_QBaseBeginMoveColumns(QSortFilterProxyModel* self, QModelIndex* sourceParent, int sourceFirst, int sourceLast, QModelIndex* destinationParent, int destinationColumn);
void QSortFilterProxyModel_EndMoveColumns(QSortFilterProxyModel* self);
void QSortFilterProxyModel_OnEndMoveColumns(QSortFilterProxyModel* self, intptr_t slot);
void QSortFilterProxyModel_QBaseEndMoveColumns(QSortFilterProxyModel* self);
void QSortFilterProxyModel_BeginResetModel(QSortFilterProxyModel* self);
void QSortFilterProxyModel_OnBeginResetModel(QSortFilterProxyModel* self, intptr_t slot);
void QSortFilterProxyModel_QBaseBeginResetModel(QSortFilterProxyModel* self);
void QSortFilterProxyModel_EndResetModel(QSortFilterProxyModel* self);
void QSortFilterProxyModel_OnEndResetModel(QSortFilterProxyModel* self, intptr_t slot);
void QSortFilterProxyModel_QBaseEndResetModel(QSortFilterProxyModel* self);
void QSortFilterProxyModel_ChangePersistentIndex(QSortFilterProxyModel* self, QModelIndex* from, QModelIndex* to);
void QSortFilterProxyModel_OnChangePersistentIndex(QSortFilterProxyModel* self, intptr_t slot);
void QSortFilterProxyModel_QBaseChangePersistentIndex(QSortFilterProxyModel* self, QModelIndex* from, QModelIndex* to);
void QSortFilterProxyModel_ChangePersistentIndexList(QSortFilterProxyModel* self, libqt_list /* of QModelIndex* */ from, libqt_list /* of QModelIndex* */ to);
void QSortFilterProxyModel_OnChangePersistentIndexList(QSortFilterProxyModel* self, intptr_t slot);
void QSortFilterProxyModel_QBaseChangePersistentIndexList(QSortFilterProxyModel* self, libqt_list /* of QModelIndex* */ from, libqt_list /* of QModelIndex* */ to);
libqt_list /* of QModelIndex* */ QSortFilterProxyModel_PersistentIndexList(const QSortFilterProxyModel* self);
void QSortFilterProxyModel_OnPersistentIndexList(const QSortFilterProxyModel* self, intptr_t slot);
libqt_list /* of QModelIndex* */ QSortFilterProxyModel_QBasePersistentIndexList(const QSortFilterProxyModel* self);
QObject* QSortFilterProxyModel_Sender(const QSortFilterProxyModel* self);
void QSortFilterProxyModel_OnSender(const QSortFilterProxyModel* self, intptr_t slot);
QObject* QSortFilterProxyModel_QBaseSender(const QSortFilterProxyModel* self);
int QSortFilterProxyModel_SenderSignalIndex(const QSortFilterProxyModel* self);
void QSortFilterProxyModel_OnSenderSignalIndex(const QSortFilterProxyModel* self, intptr_t slot);
int QSortFilterProxyModel_QBaseSenderSignalIndex(const QSortFilterProxyModel* self);
int QSortFilterProxyModel_Receivers(const QSortFilterProxyModel* self, const char* signal);
void QSortFilterProxyModel_OnReceivers(const QSortFilterProxyModel* self, intptr_t slot);
int QSortFilterProxyModel_QBaseReceivers(const QSortFilterProxyModel* self, const char* signal);
bool QSortFilterProxyModel_IsSignalConnected(const QSortFilterProxyModel* self, QMetaMethod* signal);
void QSortFilterProxyModel_OnIsSignalConnected(const QSortFilterProxyModel* self, intptr_t slot);
bool QSortFilterProxyModel_QBaseIsSignalConnected(const QSortFilterProxyModel* self, QMetaMethod* signal);
void QSortFilterProxyModel_Delete(QSortFilterProxyModel* self);

#ifdef __cplusplus
} /* extern C */
#endif

#endif
